// index.js ‚Äî Render: Firestore listener -> FCM sender (prod-ready)
const express = require("express");
const admin = require("firebase-admin");

const app = express();
app.use(express.json());

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ENV
const norm = (v) => (typeof v === "string" ? v.trim().replace(/^"|"$/g, "") : "");
const projectId = norm(process.env.FIREBASE_PROJECT_ID);
const clientEmail = norm(process.env.FIREBASE_CLIENT_EMAIL);
let privateKey = process.env.FIREBASE_PRIVATE_KEY;
if (privateKey) privateKey = norm(privateKey).replace(/\\n/g, "\n");

// –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ENV (–≤ –ø—Ä–æ–¥–µ –ª—É—á—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ alert'—ã)
if (!projectId || !clientEmail || !privateKey) {
  console.error("Missing Firebase ENV vars. Set FIREBASE_PROJECT_ID, FIREBASE_CLIENT_EMAIL, FIREBASE_PRIVATE_KEY");
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Admin SDK
admin.initializeApp({
  credential: admin.credential.cert({ projectId, clientEmail, privateKey }),
});
const db = admin.firestore();
const fcm = admin.messaging();

console.log("Firebase Admin initialized, Firestore listener will start.");

// –ö–æ–Ω—Ñ–∏–≥
const WATCH_COLLECTION = "Chats"; // <- –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
const CLAIM_FIELD = "notificationClaim"; // –ø–æ–ª–µ –¥–ª—è claim / lock
const NOTIFIED_FIELD = "notified"; // —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
const MAX_BATCH = 500; // sendMulticast –º–∞–∫—Å–∏–º—É–º 500 —Ç–æ–∫–µ–Ω–æ–≤

// –§—É–Ω–∫—Ü–∏—è —á—Ç–æ–± –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è "–∑–∞—Ö–≤–∞—Ç–∏—Ç—å" –¥–æ–∫—É–º–µ–Ω—Ç: atomically set claim to this instance id
const instanceId = `${Date.now()}_${Math.random().toString(36).slice(2,10)}`;

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–º–µ—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ: –µ—Å–ª–∏ NOTIFIED_FIELD —É–∂–µ true => –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
// –∏–Ω–∞—á–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å CLAIM_FIELD = instanceId.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ claim –ø–æ—Å—Ç–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ NOTIFIED_FIELD –±—ã–ª false.
async function tryClaimDoc(docRef) {
  try {
    return await db.runTransaction(async (tx) => {
      const snap = await tx.get(docRef);
      if (!snap.exists) return false;
      const data = snap.data();
      if (data && data[NOTIFIED_FIELD]) return false;
      // –µ—Å–ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ –ø–æ–º–µ—Ç–∏–ª claim ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å CLAIM_FIELD —Ç–æ–∂–µ)
      if (data && data[CLAIM_FIELD] && data[CLAIM_FIELD] !== instanceId) return false;
      tx.update(docRef, { [CLAIM_FIELD]: instanceId });
      return true;
    });
  } catch (err) {
    console.error("tryClaimDoc tx error:", err);
    return false;
  }
}

// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –ø–æ–º–µ—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç notified:true –∏ —É–¥–∞–ª–∏–º claim
async function markNotified(docRef) {
  try {
    await docRef.update({ [NOTIFIED_FIELD]: true, [CLAIM_FIELD]: admin.firestore.FieldValue.delete() });
  } catch (err) {
    console.error("markNotified error:", err);
  }
}

// –ü—Ä–∏–º–µ—Ä: –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —É —Ç–µ–±—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ tokens: [] –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ users collection
async function getTokensForDoc(docData) {
  // –ü—Ä–∏–º–µ—Ä 1: –µ—Å–ª–∏ docData.tokens –º–∞—Å—Å–∏–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (Array.isArray(docData.tokens) && docData.tokens.length) return docData.tokens;
  // –ü—Ä–∏–º–µ—Ä 2: –¥–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç ownerId, –∏ –º—ã –∏—â–µ–º —Ç–æ–∫–µ–Ω –≤ users/{ownerId}
  if (docData.ownerId) {
    const userSnap = await db.collection("users").doc(docData.ownerId).get();
    if (userSnap.exists) {
      const user = userSnap.data();
      if (user && Array.isArray(user.tokens)) return user.tokens;
      if (user && typeof user.fcmToken === "string") return [user.fcmToken];
    }
  }
  return [];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞–º–∏
async function sendNotificationsToTokens(tokens, messagePayload) {
  if (!tokens || tokens.length === 0) return { successCount: 0 };

  let success = 0;
  for (let i = 0; i < tokens.length; i += MAX_BATCH) {
    const batch = tokens.slice(i, i + MAX_BATCH);
    const multicast = {
      tokens: batch,
      notification: messagePayload.notification,
      android: messagePayload.android,
      apns: messagePayload.apns,
      data: messagePayload.data,
    };
    try {
      const resp = await fcm.sendMulticast(multicast);
      success += resp.successCount;
      // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      resp.responses.forEach((r, idx) => {
        if (!r.success) {
          const err = r.error;
          if (err && (err.code === 'messaging/registration-token-not-registered' || err.code === 'messaging/invalid-registration-token')) {
            // TODO: —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –ë–î (user.tokens)
            console.log("Invalid token, should delete:", batch[idx]);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –≤ users collection, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å job –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
          }
        }
      });
    } catch (err) {
      console.error("sendMulticast error:", err);
      // –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å–ª–µ–¥—É—é—â–∏–µ –±–∞—Ç—á–∏
    }
  }
  return { successCount: success };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
async function handleNewDoc(doc) {
  const docRef = doc.ref;
  const data = doc.data();
  if (!data) return;

  // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ notified ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (data[NOTIFIED_FIELD]) return;

  // –ü–æ–ø—ã—Ç–∫–∞ claim'–∞: —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∏–Ω—Å—Ç–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª claim, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const claimed = await tryClaimDoc(docRef);
  if (!claimed) return;

  // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã
  const tokens = await getTokensForDoc(data);
  if (!tokens || tokens.length === 0) {
    console.log("No tokens for doc:", docRef.id);
    // –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å claim / –ø–æ–º–µ—Ç–∏—Ç—å, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    await docRef.update({ [CLAIM_FIELD]: admin.firestore.FieldValue.delete() });
    return;
  }

  // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π –ø–æ–¥ —Å–µ–±—è)
  const messagePayload = {
    notification: {
      title: "üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª",
      body: data.name ? `${data.name} –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω` : "–ù–æ–≤—ã–π —Ñ–∞–π–ª",
    },
    android: { priority: "high" },
    data: { fileId: docRef.id },
  };

  const result = await sendNotificationsToTokens(tokens, messagePayload);
  console.log(`Sent ${result.successCount} notifications for doc ${docRef.id}`);

  // –ü–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
  await markNotified(docRef);
}

// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ‚Äî –¥–æ–±—Ä–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
function startListener() {
  console.log(`Starting listener on collection "${WATCH_COLLECTION}"`);
  db.collection(WATCH_COLLECTION)
    .where(NOTIFIED_FIELD, "==", false) // —Å–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã (–µ—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å)
    .onSnapshot((snapshot) => {
      snapshot.docChanges().forEach((change) => {
        if (change.type === "added") {
          handleNewDoc(change.doc).catch(err => console.error("handleNewDoc error:", err));
        }
      });
    }, (err) => {
      console.error("onSnapshot listener error:", err);
      // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç / alert
    });
}

// –ó–∞–ø—É—Å–∫ listener'–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
startListener();

// HTTP endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞/—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
app.post("/send-notification-test", async (req, res) => {
  const { tokens, title, body } = req.body;
  if (!tokens || !tokens.length) return res.status(400).json({ error: "No tokens" });

  const payload = {
    notification: { title: title || "–¢–µ—Å—Ç", body: body || "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" },
    android: { priority: "high" },
  };
  const r = await sendNotificationsToTokens(tokens, payload);
  res.json({ sent: r.successCount });
});

// –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
