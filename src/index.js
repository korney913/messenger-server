// index.js ‚Äî Firestore listener -> FCM sender (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞)
const express = require("express");
const admin = require("firebase-admin");

const app = express();
app.use(express.json());

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase ===
const norm = (v) => (typeof v === "string" ? v.trim().replace(/^"|"$/g, "") : "");
const projectId = norm(process.env.FIREBASE_PROJECT_ID);
const clientEmail = norm(process.env.FIREBASE_CLIENT_EMAIL);
let privateKey = process.env.FIREBASE_PRIVATE_KEY;
if (privateKey) privateKey = norm(privateKey).replace(/\\n/g, "\n");

if (!projectId || !clientEmail || !privateKey) {
  console.error("‚ùå Missing Firebase ENV vars");
  process.exit(1);
}

admin.initializeApp({
  credential: admin.credential.cert({ projectId, clientEmail, privateKey }),
});
const db = admin.firestore();

console.log("‚úÖ Firebase Admin initialized");

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const CHATS_COLLECTION = "Chats";
const MESSAGES_SUBCOLLECTION = "Messages";
const MAX_BATCH = 500;

// === –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è) ===
async function getTokensForChatParticipants(chatId, senderUid) {
  try {
    const chatSnap = await db.collection(CHATS_COLLECTION).doc(chatId).get();
    if (!chatSnap.exists) {
      console.log("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:", chatId);
      return [];
    }

    const chatData = chatSnap.data();
    const participants = chatData.participants || [];

    const receivers = participants.filter((uid) => uid !== senderUid);
    if (receivers.length === 0) {
      console.log("‚ö†Ô∏è –í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)");
      return [];
    }

    console.log(`üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ (${receivers.length}):`, receivers);

    const tokens = [];
    for (const uid of receivers) {
      const userSnap = await db.collection("Users").doc(uid).get();
      if (userSnap.exists && userSnap.data().token) {
        tokens.push(userSnap.data().token);
      } else {
        console.log(`‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${uid}`);
      }
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tokens.length} —Ç–æ–∫–µ–Ω–æ–≤`);
    return tokens;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:", err);
    return [];
  }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async function sendNotificationsToTokens(tokens, messagePayload) {
  if (!tokens || tokens.length === 0) return { successCount: 0 };

  let success = 0;
  for (let i = 0; i < tokens.length; i += MAX_BATCH) {
    const batch = tokens.slice(i, i + MAX_BATCH);
    const multicast = {
      tokens: batch,
      notification: messagePayload.notification,
      android: messagePayload.android,
      data: messagePayload.data,
    };
    try {
      const resp = await admin.messaging().sendEachForMulticast(multicast);
      success += resp.successCount;
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${resp.successCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err);
    }
  }
  return { successCount: success };
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async function handleNewMessage(chatId, messageDoc) {
  const data = messageDoc.data();
  if (!data) return;

  const { senderUid, message } = data;
  console.log(`üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ${chatId} –æ—Ç ${senderUid}:`, message);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  const tokens = await getTokensForChatParticipants(chatId, senderUid);
  if (!tokens.length) {
    console.log("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    return;
  }

  const messagePayload = {
    notification: {
      title: "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      body: message || "–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    },
    android: { priority: "high" },
    data: { chatId, senderUid },
  };

  const result = await sendNotificationsToTokens(tokens, messagePayload);
  console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (${result.successCount}) –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
}

// === –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–π Messages ===
function startListener() {
  console.log(`üëÇ –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ "${CHATS_COLLECTION}/{chatId}/${MESSAGES_SUBCOLLECTION}"`);

  db.collection(CHATS_COLLECTION).onSnapshot((chatSnap) => {
    chatSnap.docChanges().forEach((chatChange) => {
      const chatId = chatChange.doc.id;

      db.collection(CHATS_COLLECTION)
        .doc(chatId)
        .collection(MESSAGES_SUBCOLLECTION)
        .onSnapshot((msgSnap) => {
          msgSnap.docChanges().forEach((change) => {
            if (change.type === "added") {
              handleNewMessage(chatId, change.doc).catch((err) =>
                console.error("handleNewMessage error:", err)
              );
            }
          });
        });
    });
  });
}

// === –ó–∞–ø—É—Å–∫ ===
startListener();

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
