// index.js ‚Äî Render: Firestore listener -> FCM sender (prod-ready)
const express = require("express");
const admin = require("firebase-admin");

const app = express();
app.use(express.json());

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ENV
const norm = (v) => (typeof v === "string" ? v.trim().replace(/^"|"$/g, "") : "");
const projectId = norm(process.env.FIREBASE_PROJECT_ID);
const clientEmail = norm(process.env.FIREBASE_CLIENT_EMAIL);
let privateKey = process.env.FIREBASE_PRIVATE_KEY;
if (privateKey) privateKey = norm(privateKey).replace(/\\n/g, "\n");

// –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ENV
if (!projectId || !clientEmail || !privateKey) {
  console.error("Missing Firebase ENV vars. Set FIREBASE_PROJECT_ID, FIREBASE_CLIENT_EMAIL, FIREBASE_PRIVATE_KEY");
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Admin SDK
admin.initializeApp({
  credential: admin.credential.cert({ projectId, clientEmail, privateKey }),
});
const db = admin.firestore();

console.log("Firebase Admin initialized, Firestore listener will start.");

// –ö–æ–Ω—Ñ–∏–≥
const WATCH_COLLECTION = "Chats"; // –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏
const CLAIM_FIELD = "notificationClaim"; // –ø–æ–ª–µ –¥–ª—è claim / lock
const NOTIFIED_FIELD = "notified"; // —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
const MAX_BATCH = 500; // sendMulticast –º–∞–∫—Å–∏–º—É–º 500 —Ç–æ–∫–µ–Ω–æ–≤

// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∏–Ω—Å—Ç–∞–Ω—Å–∞ –¥–ª—è claim
const instanceId = `${Date.now()}_${Math.random().toString(36).slice(2, 10)}`;

// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ
async function tryClaimDoc(docRef) {
  try {
    return await db.runTransaction(async (tx) => {
      const snap = await tx.get(docRef);
      if (!snap.exists) return false;
      const data = snap.data();
      if (data && data[NOTIFIED_FIELD]) return false;
      if (data && data[CLAIM_FIELD] && data[CLAIM_FIELD] !== instanceId) return false;
      tx.update(docRef, { [CLAIM_FIELD]: instanceId });
      return true;
    });
  } catch (err) {
    console.error("tryClaimDoc tx error:", err);
    return false;
  }
}

// –ü–æ–º–µ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
async function markNotified(docRef) {
  try {
    await docRef.update({
      [NOTIFIED_FIELD]: true,
      [CLAIM_FIELD]: admin.firestore.FieldValue.delete()
    });
  } catch (err) {
    console.error("markNotified error:", err);
  }
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–µ—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
async function getTokensForDoc(docData) {
  // –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π
  const TEST_TOKEN = "cF2Izli0RtGDjnmjQEhNEm:APA91bHB_kvdGSjfmra5MeMrSZZbwpiU0vI21mqJ5j43cQmRk9bkZfzO0C6wMKcSBVRzlToI-cUmHSc0DByMTYVGgTosUp7LJVxmPdqOAxh46KyzBKFW0Xw";
  return [TEST_TOKEN];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–∞—Ç—á–∞–º–∏
async function sendNotificationsToTokens(tokens, messagePayload) {
  if (!tokens || tokens.length === 0) return { successCount: 0 };

  let success = 0;
  for (let i = 0; i < tokens.length; i += MAX_BATCH) {
    const batch = tokens.slice(i, i + MAX_BATCH);
    const multicast = {
      tokens: batch,
      notification: messagePayload.notification,
      android: messagePayload.android,
      apns: messagePayload.apns,
      data: messagePayload.data,
    };

    try {
      const resp = await admin.messaging().sendMulticast(multicast);
      success += resp.successCount;

      // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      resp.responses.forEach((r, idx) => {
        if (!r.success) {
          const err = r.error;
          if (err && (err.code === 'messaging/registration-token-not-registered' ||
                      err.code === 'messaging/invalid-registration-token')) {
            console.log("Invalid token, should delete:", batch[idx]);
          }
        }
      });
    } catch (err) {
      console.error("sendMulticast error:", err);
    }
  }

  return { successCount: success };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function handleNewDoc(doc) {
  const docRef = doc.ref;
  const data = doc.data();
  if (!data) return;

  if (data[NOTIFIED_FIELD]) return;

  const claimed = await tryClaimDoc(docRef);
  if (!claimed) return;

  const tokens = await getTokensForDoc(data);
  if (!tokens || tokens.length === 0) {
    console.log("No tokens for doc:", docRef.id);
    await docRef.update({ [CLAIM_FIELD]: admin.firestore.FieldValue.delete() });
    return;
  }

  const messagePayload = {
    notification: {
      title: "üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª",
      body: data.name ? `${data.name} –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω` : "–ù–æ–≤—ã–π —Ñ–∞–π–ª",
    },
    android: { priority: "high" },
    data: { fileId: docRef.id },
  };

  const result = await sendNotificationsToTokens(tokens, messagePayload);
  console.log(`Sent ${result.successCount} notifications for doc ${docRef.id}`);

  await markNotified(docRef);
}

// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
function startListener() {
  console.log(`Starting listener on collection "${WATCH_COLLECTION}"`);
  db.collection(WATCH_COLLECTION)
    .where(NOTIFIED_FIELD, "==", false)
    .onSnapshot((snapshot) => {
      snapshot.docChanges().forEach((change) => {
        if (change.type === "added") {
          handleNewDoc(change.doc).catch(err => console.error("handleNewDoc error:", err));
        }
      });
    }, (err) => {
      console.error("onSnapshot listener error:", err);
    });
}

// –ó–∞–ø—É—Å–∫ listener
startListener();

// HTTP endpoint –¥–ª—è —Ç–µ—Å—Ç–∞
app.post("/send-notification-test", async (req, res) => {
  const { tokens, title, body } = req.body;
  if (!tokens || !tokens.length) return res.status(400).json({ error: "No tokens" });

  const payload = {
    notification: { title: title || "–¢–µ—Å—Ç", body: body || "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" },
    android: { priority: "high" },
  };
  const r = await sendNotificationsToTokens(tokens, payload);
  res.json({ sent: r.successCount });
});

// –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
